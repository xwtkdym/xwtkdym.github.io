<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android</title>
      <link href="/2020/09/09/android-1/"/>
      <url>/2020/09/09/android-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin泛型</title>
      <link href="/2020/09/09/kotlin-fan-xing/"/>
      <url>/2020/09/09/kotlin-fan-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型声明方法"><a href="#泛型声明方法" class="headerlink" title="泛型声明方法"></a>泛型声明方法</h1><pre class=" language-Kot"><code class="language-Kot">fun <T>  f1(T a) &#123;&#125; //声明泛型函数fun <T> T.f1()&#123;&#125; //为泛型添加函数</code></pre><h1 id="out-T和-in-T"><a href="#out-T和-in-T" class="headerlink" title="out T和 in T"></a><code>out T</code>和 <code>in T</code></h1><p><code>in T</code>将<code>T</code>类型角色限定为消费者，只能用于添加数据，无法读取，同时安全的将传入的类型扩展为以<code>T</code>为下限的的类。</p><p><code>out T</code>将<code>T</code>类型角色限定为生产者，保证只能用来读取，无法写入。同时安全的将传入类型扩展为<code>T</code>为上限的类。</p><p>通过<code>in T</code>和<code>out T</code>可以更加严格的限定代码的安全级别。</p><p>例如下面这个例子，<code>Iterator&lt;out T&gt;</code>保证实现了<code>Iterator</code>的对象只能用于生产者。</p><pre class=" language-Kotlin"><code class="language-Kotlin">public interface Iterable<out T> &#123;    public operator fun iterator(): Iterator<T>&#125;</code></pre><h1 id="类型投影"><a href="#类型投影" class="headerlink" title="类型投影"></a>类型投影</h1><p>考虑Array中的的一个泛型实现</p><pre class=" language-Java"><code class="language-Java">class Array<T> (val size: Int) &#123;    fun get(index: Int): T&#123;&#125;    fun set(index: Int, value: T) &#123;&#125;&#125;</code></pre><p>这里的<code>Array&lt;T&gt;</code>既不能是<code>Array&lt;in T&gt;</code>也不能是<code>Array&lt;out T&gt;</code>，显然类型<code>T</code>灵活性在这里收到了一定限制。</p><p>我们继续看一个函数：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">copy</span><span class="token punctuation">(</span>from<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">></span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span>size <span class="token operator">==</span> <span class="token keyword">to</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> from<span class="token punctuation">.</span>indices<span class="token punctuation">)</span>        <span class="token keyword">to</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> from<span class="token punctuation">[</span>i<span class="token punctuation">]</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>我们来使用这个数组</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> ints<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Int<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">val</span> any <span class="token operator">=</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">""</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span>ints<span class="token punctuation">,</span> any<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这里出错了</span></code></pre><p>我们期望<code>Array&lt;Int&gt;</code>会上转为<code>Array&lt;Any&gt;</code>，但是实际上两个类型并不相关，但是这里我们希望能够让传入一个继承自<code>T</code>的对象<code>Int</code>，我们考虑用<code>out T</code>。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">copy</span><span class="token punctuation">(</span>from<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">out</span> Any<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">></span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>在这里<code>out</code>起到了一个类型限定的作用，<code>in</code>也是同样的道理。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">fill</span><span class="token punctuation">(</span>dest<span class="token operator">:</span> Array<span class="token operator">&lt;</span><span class="token keyword">in</span> String<span class="token operator">></span><span class="token punctuation">,</span> value<span class="token operator">:</span> String<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>类似<code>Java</code>的<code>?</code>，kotlin提供了<code>*</code>来实现更加灵活的处理。</p><p>例如，如果有一个接口声明为<code>interface Function&lt;in T, out T&gt;</code>，那么通过<code>*</code>来实现它有会有如下三种情况：</p><ul><li><p><code>Function&lt;*, String&gt;</code> 表示<code>Function&lt;in Nothing, String&gt;</code>；</p></li><li><p><code>Function&lt;Int, *&gt;</code> 表示<code>Function&lt;Int, out Any?&gt;</code>；</p></li><li><p><code>Function&lt;*, *&gt;</code> 表示<code>Function&lt;in Nothing, out Any?</code>；</p></li></ul><h1 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h1><p>我们先声明一个泛型类</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Box<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">(</span>t<span class="token operator">:</span> T<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> t&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>一般创建一个泛型类需要指定类型参数</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> box<span class="token operator">:</span>Box<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> Box<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>实际上<code>Kotlin</code>会自动根据传入参数<code>1</code>推导出类型</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> box<span class="token operator">=</span><span class="token function">Box</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>由于构造函数类型是<code>T</code>，所以推导出<code>T</code>的类型和参数<code>1</code>一致，从而推导出<code>box</code>是<code>Box&lt;Int&gt;</code>类型。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2020/09/08/dai-li-mo-shi/"/>
      <url>/2020/09/08/dai-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h1><p>客户端不能或者不想直接引用一个对象时，可以通过代理来实现间接引用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> design-pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/2020/09/08/zhuang-shi-mo-shi/"/>
      <url>/2020/09/08/zhuang-shi-mo-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="模式动机"><a href="#模式动机" class="headerlink" title="模式动机"></a>模式动机</h1><p>动态的给类添加行为，通过将一个对象嵌入另一个对象，由另一个对象来决定是否调用来扩展自己的行为。</p><blockquote><p>对比通过继承来给类增加功能，装饰器模式(<code>Decorator</code>)是动态的，可以由用户来控制是添加行为的方式和时机。</p></blockquote><h1 id="模式定义"><a href="#模式定义" class="headerlink" title="模式定义"></a>模式定义</h1><p>装饰模式(<code>Decorator Pattern</code>)：动态的给对象添加一些额外的职责，也称为包装器(<code>Wrapper</code>)。</p><p>模式结构</p><p><img src="http://www.plantuml.com/plantuml/png/dP712W8X54NtxolUieYP3uWMazEFY3v8cF4EQhEf_ZqXK2eeoPLSppqgRuX9XtIP9nenB_3Y4nzkVSyZl0cIfCJlm4aCWau8H6NBw3gkZNhmwYpnyIUXYCoaOwnMlXBdjMCiaX47lzdkUOMpTAzmVNnpgTpP0dz-vKlhcMjhbPorMn4QVEfFto3Uvd4-0000" alt="装饰者模式类图"></p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul><li><p>同样是扩展功能，装饰模式比继承更加灵活</p></li><li><p>可以通过动态方式扩展对象，通过配置文件来调整等</p></li><li><p>能够通过排列组合创造功能丰富的对象</p></li><li><p>符合开闭原则</p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1></li><li><p>多次装饰的对象，出错排查困难重重</p></li><li><p>产生很多琐碎的对象，增加系统复杂度</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> design-pattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Context</title>
      <link href="/2020/09/08/context/"/>
      <url>/2020/09/08/context/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Context</code>意味着一个场景，就是用户和软件交互的过程。从安卓的角度来看，<code>Activity</code>，<code>Service</code>都是一个Context。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Context</code>的类关系图如下：</p><p><img src="http://www.plantuml.com/plantuml/png/SoWkIImgAStDuNBEpoj9hIXHiAdHrLM0SiAB4WiAKekmoddc5kHmSQ4gH54Gaf6QcmgLmAekEBMeB3Cv5QkSOq51JcPoOabcVXw69NfwTiYEG9VMpKbDAudEo4n9ISsBrKLLoeNkDeI5oIMPPPabbLmEgNafmF000000" alt="Context 类关系图"></p><h1 id="Context数量"><a href="#Context数量" class="headerlink" title="Context数量"></a><code>Context</code>数量</h1><p>每个应用程序会有一个 <code>Application</code>，另外加上<code>Activity</code>和<code>Service</code>的数量就是Context的数量。</p><div style="callout:primary"> 一般情况下只有一个<code>Application</code>，但是多进程情况等需要额外考虑<code>Application</code>的数量</div><h1 id="Context-的作用"><a href="#Context-的作用" class="headerlink" title="Context 的作用"></a><code>Context</code> 的作用</h1><p><code>Context</code> 具体功能是ContextImpl类实现的，所以<code>Activity</code>、<code>Service</code>和<code>Application</code>这三种类型的<code>Context</code>都是通用的。</p><div style="callout:wraning">对于启动<code>Activity</code>，弹出<code>Toast</code>。处于安全考虑，它们不能凭空出现，必须建立在另一个<code>Activity</code>的基础之上(除非是 <code>System Alert</code>类型的<code>Dialog</code>)。这种类型下只能用<code>Activity</code>类型的<code>Context</code>。</div><h1 id="Context提供的方法"><a href="#Context提供的方法" class="headerlink" title="Context提供的方法"></a><code>Context</code>提供的方法</h1><pre class=" language-Java"><code class="language-Java">public abstract class Context &#123;     // 四大组件相关     public abstract void startActivity(Intent intent);     public abstract void startActivity(Intent intent, @Nullable Bundle options);     public abstract void startActivities(Intent[] intents);     public abstract void startActivities(Intent[] intents, Bundle options);     public abstract void sendBroadcast(Intent intent);     public abstract void sendBroadcast(Intent intent, @Nullable String receiverPermission);     public abstract void sendOrderedBroadcast(Intent intent, String receiverPermission);     public abstract Intent registerReceiver(BroadcastReceiver receiver, IntentFilter filter);     public abstract void unregisterReceiver(BroadcastReceiver receiver);     public abstract ComponentName startService(Intent service);     public abstract ComponentName startForegroundService(Intent service);     public abstract boolean stopService(Intent service);     public abstract boolean bindService(Intent service, ServiceConnection conn, int flags);     public abstract void unbindService(@NonNull ServiceConnection conn);     public abstract ContentResolver getContentResolver();         // 获取系统资源     public abstract AssetManager getAssets();     public abstract Resources getResources();     public abstract PackageManager getPackageManager();     public abstract ClassLoader getClassLoader();     public abstract Context getApplicationContext();     public abstract Context createConfigurationContext(Configuration overrideConfiguration);     public abstract Context createDisplayContext(@NonNull Display display);     public abstract @Nullable Object getSystemService(@ServiceName @NonNull String name);     public final @Nullable <T> T getSystemService(@NonNull Class<T> serviceClass);         // 获取应用资源     public final CharSequence getText(@StringRes int resId);     public final String getString(@StringRes int resId);     public final String getString(@StringRes int resId, Object... formatArgs);     public final int getColor(@ColorRes int id);     public final Drawable getDrawable(@DrawableRes int id);     public final ColorStateList getColorStateList(@ColorRes int id);     public abstract void setTheme(@StyleRes int resid);     public abstract Resources.Theme getTheme();     public final TypedArray obtainStyledAttributes(@NonNull int[] attrs);     public final TypedArray obtainStyledAttributes(@StyleRes int resid, int[] attrs);         // 获取应用相关信息     public String getOpPackageName();     public Executor getMainExecutor();     public abstract Looper getMainLooper();     public abstract String getPackageName();     public abstract ApplicationInfo getApplicationInfo();     public abstract String getPackageResourcePath();     public abstract String getPackageCodePath();     public abstract @Nullable String getSystemServiceName(@NonNull Class<?> serviceClass);     public abstract int checkPermission(@NonNull String permission, int pid, int uid);     public abstract int checkSelfPermission(@NonNull String permission);         // 文件相关     public abstract boolean deleteFile(String name);     public abstract File getDataDir();     public abstract File getFilesDir();     public abstract File getNoBackupFilesDir();     public abstract File getExternalFilesDir(@Nullable String type);     public abstract File[] getExternalFilesDirs(String type);     public abstract File getObbDir();     public abstract File[] getObbDirs();     public abstract File getCacheDir();     public abstract File getCodeCacheDir();     public abstract File getExternalCacheDir();     public abstract File[] getExternalCacheDirs();     public abstract File[] getExternalMediaDirs();     public abstract SharedPreferences getSharedPreferences(String name, int mode);     public abstract boolean moveSharedPreferencesFrom(Context sourceContext, String name);     public abstract void reloadSharedPreferences();     public abstract FileInputStream openFileInput(String name);     public abstract FileOutputStream openFileOutput(String name, @FileMode int mode);         // 数据库相关     public abstract SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory f);     public abstract boolean deleteDatabase(String name);     public abstract String[] databaseList();         // 其他     public void registerComponentCallbacks(ComponentCallbacks callback);     public void unregisterComponentCallbacks(ComponentCallbacks callback);&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android样式和主体背景</title>
      <link href="/2020/09/08/android-yang-shi-he-zhu-ti-bei-jing/"/>
      <url>/2020/09/08/android-yang-shi-he-zhu-ti-bei-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>借助 Android 上的样式和主题背景，您可将应用设计的细节与界面的结构和行为分开，类似于网页设计中的样式表。</p><p>样式是一个属性集合，用于指定单个 <code>View</code> 的外观。 样式可以指定字体颜色、字号、背景颜色等属性。</p><blockquote><p> 样式和主体背景在 res/values/ 中的样式资源文件中声明，通常命名为 styles.xml。</p></blockquote><h1 id="定义样式并使用"><a href="#定义样式并使用" class="headerlink" title="定义样式并使用"></a>定义样式并使用</h1><ol><li><p>用唯一标识定义一个 &lt;style&gt; 元素</p></li><li><p>为要定义的样式添加 &lt;item&gt; 元素</p><blockquote><p>item中使用name来指定要在布局中使用的属性，对应布局属性的值会被替换为item元素的值。</p></blockquote></li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>GreenText<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TextAppearance.AppCompat<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        &lt;item name=<span class="token string">"android:textColor"</span>><span class="token hexcode">#00ff00</span>&lt;/item>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><p>将上面的样式定义到布局</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span><span class="token style-attr language-css"><span class="token attr-name">          <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">@style/GreenText</span><span class="token punctuation">"</span></span>          <span class="token attr-name">...</span><span class="token punctuation">/></span></span></code></pre><div style="callout:primary"> 只有添加了 style 属性的元素才会应用这些样式属性，任何子视图都不会应用这些样式。如果你希望子视图继承样式，则应该改为具有android:theme属性的样式。 </div><h2 id="主题背景"><a href="#主题背景" class="headerlink" title="主题背景"></a>主题背景</h2><p>主体背景是一系列资源的集合，可以被样式或者布局使用。提供了一种对Android资源的语义名称，可以让开发者在其他地方引用这些资源。</p><div style="callout:default"> 相对于样式，主题的设置会影响所有子View </div><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Theme.Plaid<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">       &lt;item name=<span class="token string">"colorPrimary"</span>>@color/teal_<span class="token number">500</span>&lt;/item>       &lt;item name=<span class="token string">"colorSecondary"</span>>@color/pink_<span class="token number">200</span>&lt;/item></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- AndroidManifest.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>     <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/Theme.Plaid<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span>     <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/Theme.Plaid.About<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>&lt;!- layout/xxx.xml --><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ConstraintLayout</span>    <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/Theme.Plaid.Foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>在ViewGroup中使用时，可以这样做</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ViewGroup</span> <span class="token attr-name">...</span>     <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>?attr/colorSurface<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span></code></pre><p>?attr/themeAttributeName可以委托主题背景来完成。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>沙发</title>
      <link href="/2020/09/07/sha-fa/"/>
      <url>/2020/09/07/sha-fa/</url>
      
        <content type="html"><![CDATA[<p>好久不写东西了，可能要重拾了！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
